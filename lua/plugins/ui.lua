--
-- Icons = {
--     misc = {
--       dots = "Û∞áò",
--     },
--     ft = {
--       octo = "Ôêà",
--     },
--     dap = {
--       Stopped             = { "Û∞Åï ", "DiagnosticWarn", "DapStoppedLine" },
--       Breakpoint          = "ÔÜí ",
--       BreakpointCondition = "ÔÅô ",
--       BreakpointRejected  = { "ÔÅ™ ", "DiagnosticError" },
--       LogPoint            = ".>",
--     },
--     diagnostics = {
--       Error = "ÔÅó ",
--       Warn  = "ÔÅ± ",
--       Hint  = "ÔÉ´ ",
--       Info  = "ÔÅö ",
--     },
--     git = {
--       added    = "ÔÉæ ",
--       modified = "ÔÖã ",
--       removed  = "ÔÖÜ ",
--     },
--     kinds = {
--       Array         = "Ó™ä ",
--       Boolean       = "Û∞®ô ",
--       Class         = "Ó≠õ ",
--       Codeium       = "Û∞ò¶ ",
--       Color         = "Ó≠ú ",
--       Control       = "Ó©® ",
--       Collapsed     = "Ôë† ",
--       Constant      = "Û∞èø ",
--       Constructor   = "Ôê£ ",
--       Copilot       = "Ôí∏ ",
--       Enum          = "ÔÖù ",
--       EnumMember    = "ÔÖù ",
--       Event         = "Ó™Ü ",
--       Field         = "ÔÄ´ ",
--       File          = "Ó©ª ",
--       Folder        = "Óóø ",
--       Function      = "Û∞äï ",
--       Interface     = "ÔÉ® ",
--       Key           = "Ó™ì ",
--       Keyword       = "Ó≠¢ ",
--       Method        = "Û∞äï ",
--       Module        = "Ôíá ",
--       Namespace     = "Û∞¶Æ ",
--       Null          = "Óäô ",
--       Number        = "Û∞é† ",
--       Object        = "Ó™ã ",
--       Operator      = "Ó≠§ ",
--       Package       = "Ôíá ",
--       Property      = "ÔÄ´ ",
--       Reference     = "Ó¨∂ ",
--       Snippet       = "Ó≠¶ ",
--       String        = "Ó™± ",
--       Struct        = "Û∞Üº ",
--       TabNine       = "Û∞èö ",
--       Text          = "Ó™ì ",
--       TypeParameter = "Ó™í ",
--       Unit          = "Ó™ñ ",
--       Value         = "Ó™ì ",
--       Variable      = "Û∞Ä´ ",
--     },
--   }
--
--
return {}
--
-- return {
--   -- This is what powers LazyVim's fancy-looking
--   -- tabs, which include filetype icons and close buttons.
--   {
--     "akinsho/bufferline.nvim",
--     event = "VeryLazy",
--     keys = {
--       { "<leader>bp", "<Cmd>BufferLineTogglePin<CR>", desc = "Toggle Pin" },
--       { "<leader>bP", "<Cmd>BufferLineGroupClose ungrouped<CR>", desc = "Delete Non-Pinned Buffers" },
--       { "<leader>br", "<Cmd>BufferLineCloseRight<CR>", desc = "Delete Buffers to the Right" },
--       { "<leader>bl", "<Cmd>BufferLineCloseLeft<CR>", desc = "Delete Buffers to the Left" },
--       { "<S-h>", "<cmd>BufferLineCyclePrev<cr>", desc = "Prev Buffer" },
--       { "<S-l>", "<cmd>BufferLineCycleNext<cr>", desc = "Next Buffer" },
--       { "[b", "<cmd>BufferLineCyclePrev<cr>", desc = "Prev Buffer" },
--       { "]b", "<cmd>BufferLineCycleNext<cr>", desc = "Next Buffer" },
--       { "[B", "<cmd>BufferLineMovePrev<cr>", desc = "Move buffer prev" },
--       { "]B", "<cmd>BufferLineMoveNext<cr>", desc = "Move buffer next" },
--     },
--     opts = {
--       options = {
--         -- stylua: ignore
--         close_command = function(n) Snacks.bufdelete(n) end,
--         -- stylua: ignore
--         right_mouse_command = function(n) Snacks.bufdelete(n) end,
--         diagnostics = "nvim_lsp",
--         always_show_bufferline = false,
--         diagnostics_indicator = function(_, _, diag)
--           local icons = Icons.diagnostics
--           local ret = (diag.error and icons.Error .. diag.error .. " " or "")
--             .. (diag.warning and icons.Warn .. diag.warning or "")
--           return vim.trim(ret)
--         end,
--         offsets = {
--           {
--             filetype = "neo-tree",
--             text = "Neo-tree",
--             highlight = "Directory",
--             text_align = "left",
--           },
--         },
--         ---@param opts bufferline.IconFetcherOpts
--         get_element_icon = function(opts)
--           return config.icons.ft[opts.filetype]
--         end,
--       },
--     },
--     config = function(_, opts)
--       require("bufferline").setup(opts)
--       -- Fix bufferline when restoring a session
--       vim.api.nvim_create_autocmd({ "BufAdd", "BufDelete" }, {
--         callback = function()
--           vim.schedule(function()
--             pcall(nvim_bufferline)
--           end)
--         end,
--       })
--     end,
--   },
--
--   -- statusline
--   {
--     "nvim-lualine/lualine.nvim",
--     event = "VeryLazy",
--     init = function()
--       vim.g.lualine_laststatus = vim.o.laststatus
--       if vim.fn.argc(-1) > 0 then
--         -- set an empty statusline till lualine loads
--         vim.o.statusline = " "
--       else
--         -- hide the statusline on the starter page
--         vim.o.laststatus = 0
--       end
--     end,
--     opts = function()
--       -- PERF: we don't need this lualine require madness ü§∑
--       local lualine_require = require("lualine_require")
--       lualine_require.require = require
--
--       local icons = Icons
--
--       vim.o.laststatus = vim.g.lualine_laststatus
--
--       local opts = {
--         options = {
--           theme = "auto",
--           globalstatus = vim.o.laststatus == 3,
--           disabled_filetypes = { statusline = { "dashboard", "alpha", "ministarter" } },
--         },
--         sections = {
--           lualine_a = { "mode" },
--           lualine_b = { "branch" },
--
--           lualine_c = {
--             LazyVim.lualine.root_dir(),
--             {
--               "diagnostics",
--               symbols = {
--                 error = icons.diagnostics.Error,
--                 warn = icons.diagnostics.Warn,
--                 info = icons.diagnostics.Info,
--                 hint = icons.diagnostics.Hint,
--               },
--             },
--             { "filetype", icon_only = true, separator = "", padding = { left = 1, right = 0 } },
--             { LazyVim.lualine.pretty_path() },
--           },
--           lualine_x = {
--             -- stylua: ignore
--             {
--               function() return require("noice").api.status.command.get() end,
--               cond = function() return package.loaded["noice"] and require("noice").api.status.command.has() end,
--               color = function() return LazyVim.ui.fg("Statement") end,
--             },
--             -- stylua: ignore
--             {
--               function() return require("noice").api.status.mode.get() end,
--               cond = function() return package.loaded["noice"] and require("noice").api.status.mode.has() end,
--               color = function() return LazyVim.ui.fg("Constant") end,
--             },
--             -- stylua: ignore
--             {
--               function() return "ÔëØ  " .. require("dap").status() end,
--               cond = function() return package.loaded["dap"] and require("dap").status() ~= "" end,
--               color = function() return LazyVim.ui.fg("Debug") end,
--             },
--             -- stylua: ignore
--             {
--               require("lazy.status").updates,
--               cond = require("lazy.status").has_updates,
--               color = function() return LazyVim.ui.fg("Special") end,
--             },
--             {
--               "diff",
--               symbols = {
--                 added = icons.git.added,
--                 modified = icons.git.modified,
--                 removed = icons.git.removed,
--               },
--               source = function()
--                 local gitsigns = vim.b.gitsigns_status_dict
--                 if gitsigns then
--                   return {
--                     added = gitsigns.added,
--                     modified = gitsigns.changed,
--                     removed = gitsigns.removed,
--                   }
--                 end
--               end,
--             },
--           },
--           lualine_y = {
--             { "progress", separator = " ", padding = { left = 1, right = 0 } },
--             { "location", padding = { left = 0, right = 1 } },
--           },
--           lualine_z = {
--             function()
--               return "Ôê∫ " .. os.date("%R")
--             end,
--           },
--         },
--         extensions = { "neo-tree", "lazy" },
--       }
--
--       -- do not add trouble symbols if aerial is enabled
--       -- And allow it to be overriden for some buffer types (see autocmds)
--       if vim.g.trouble_lualine and LazyVim.has("trouble.nvim") then
--         local trouble = require("trouble")
--         local symbols = trouble.statusline({
--           mode = "symbols",
--           groups = {},
--           title = false,
--           filter = { range = true },
--           format = "{kind_icon}{symbol.name:Normal}",
--           hl_group = "lualine_c_normal",
--         })
--         table.insert(opts.sections.lualine_c, {
--           symbols and symbols.get,
--           cond = function()
--             return vim.b.trouble_lualine ~= false and symbols.has()
--           end,
--         })
--       end
--
--       return opts
--     end,
--   },
--
--   -- icons
--   {
--     "echasnovski/mini.icons",
--     lazy = true,
--     opts = {
--       file = {
--         [".keep"] = { glyph = "Û∞ä¢", hl = "MiniIconsGrey" },
--         ["devcontainer.json"] = { glyph = "Ôí∑", hl = "MiniIconsAzure" },
--       },
--       filetype = {
--         dotenv = { glyph = "Ó≠í", hl = "MiniIconsYellow" },
--       },
--     },
--     init = function()
--       package.preload["nvim-web-devicons"] = function()
--         require("mini.icons").mock_nvim_web_devicons()
--         return package.loaded["nvim-web-devicons"]
--       end
--     end,
--   },
--
--   -- ui components
--   { "MunifTanjim/nui.nvim", lazy = true },
--
--   {
--     "nvimdev/dashboard-nvim",
--     lazy = false, -- As https://github.com/nvimdev/dashboard-nvim/pull/450, dashboard-nvim shouldn't be lazy-loaded to properly handle stdin.
--     opts = function()
--       local logo = [[
--         ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó
--         ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë
--         ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë
--         ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
--         ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë
--         ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù
--      ]]
--
--       logo = string.rep("\n", 8) .. logo .. "\n\n"
--
--       local opts = {
--         theme = "doom",
--         hide = {
--           -- this is taken care of by lualine
--           -- enabling this messes up the actual laststatus setting after loading a file
--           statusline = false,
--         },
--         config = {
--           header = vim.split(logo, "\n"),
--           -- stylua: ignore
--           center = {
--             { action = 'lua LazyVim.pick()()',                           desc = " Find File",       icon = "ÔÄÇ ", key = "f" },
--             { action = "ene | startinsert",                              desc = " New File",        icon = "ÔÖõ ", key = "n" },
--             { action = 'lua LazyVim.pick("oldfiles")()',                 desc = " Recent Files",    icon = "ÔÉÖ ", key = "r" },
--             { action = 'lua LazyVim.pick("live_grep")()',                desc = " Find Text",       icon = "ÔÄ¢ ", key = "g" },
--             { action = 'lua LazyVim.pick.config_files()()',              desc = " Config",          icon = "Ôê£ ", key = "c" },
--             { action = 'lua require("persistence").load()',              desc = " Restore Session", icon = "Óçà ", key = "s" },
--             { action = "LazyExtras",                                     desc = " Lazy Extras",     icon = "Ó™å ", key = "x" },
--             { action = "Lazy",                                           desc = " Lazy",            icon = "Û∞í≤ ", key = "l" },
--             { action = function() vim.api.nvim_input("<cmd>qa<cr>") end, desc = " Quit",            icon = "Ôê¶ ", key = "q" },
--           },
--           footer = function()
--             local stats = require("lazy").stats()
--             local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
--             return { "‚ö° Neovim loaded " .. stats.loaded .. "/" .. stats.count .. " plugins in " .. ms .. "ms" }
--           end,
--         },
--       }
--
--       for _, button in ipairs(opts.config.center) do
--         button.desc = button.desc .. string.rep(" ", 43 - #button.desc)
--         button.key_format = "  %s"
--       end
--
--       -- open dashboard after closing lazy
--       if vim.o.filetype == "lazy" then
--         vim.api.nvim_create_autocmd("WinClosed", {
--           pattern = tostring(vim.api.nvim_get_current_win()),
--           once = true,
--           callback = function()
--             vim.schedule(function()
--               vim.api.nvim_exec_autocmds("UIEnter", { group = "dashboard" })
--             end)
--           end,
--         })
--       end
--
--       return opts
--     end,
--   },
-- }
